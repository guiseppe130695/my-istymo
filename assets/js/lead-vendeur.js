/**
 * JavaScript pour la gestion des leads vendeur
 */

jQuery(document).ready(function($) {
    
    // Toggle favori
    $(document).on('click', '.favorite-btn', function(e) {
        e.preventDefault();
        
        var $toggle = $(this);
        var entryId = $toggle.data('entry-id');
        var $row = $toggle.closest('.lead-vendeur-row');
        
        if ($toggle.hasClass('loading')) {
            return; // √âviter les clics multiples
        }
        
        $toggle.addClass('loading');
        
        $.ajax({
            url: simpleFavoritesAjax.ajax_url,
            type: 'POST',
            data: {
                action: 'simple_favorites_toggle',
                entry_id: entryId,
                form_id: leadVendeurAjax.form_id,
                nonce: simpleFavoritesAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    if (response.data.action === 'added') {
                        $toggle.addClass('favori-active');
                        $toggle.html('‚òÖ'); // √âtoile pleine
                        $row.addClass('favori-row');
                        showMessage('Lead ajout√© aux favoris', 'success');
                    } else {
                        $toggle.removeClass('favori-active');
                        $toggle.html('‚òÜ'); // √âtoile vide
                        $row.removeClass('favori-row');
                        showMessage('Lead retir√© des favoris', 'success');
                    }
                } else {
                    showMessage('Erreur: ' + response.data, 'error');
                }
            },
            error: function() {
                showMessage('Erreur de connexion', 'error');
            },
            complete: function() {
                $toggle.removeClass('loading');
            }
        });
    });
    
    // Voir les d√©tails d'un lead
    $(document).on('click', '.view-lead-details', function(e) {
        e.preventDefault();
        
        var entryId = $(this).data('entry-id');
        
        $.ajax({
            url: leadVendeurAjax.ajax_url,
            type: 'POST',
            data: {
                action: 'lead_vendeur_get_entry_details',
                entry_id: entryId,
                nonce: leadVendeurAjax.nonce
            },
            success: function(response) {
                if (response.success) {
                    showLeadDetailsModal(response.data);
                } else {
                    showMessage('Erreur: ' + response.data, 'error');
                }
            },
            error: function() {
                showMessage('Erreur de connexion', 'error');
            }
        });
    });
    
    // Fermer le modal
    $(document).on('click', '.lead-details-modal-close, .lead-details-modal', function(e) {
        if (e.target === this) {
            closeLeadDetailsModal();
        }
    });
    
    // √âchapper pour fermer le modal
    $(document).on('keydown', function(e) {
        if (e.keyCode === 27) { // √âchap
            closeLeadDetailsModal();
        }
    });
    
    /**
     * Extraire l'ID du lead depuis les donn√©es Gravity Form
     */
    function extractLeadId(data) {
        // Essayer diff√©rentes sources pour l'ID
        if (data.entry_id) {
            return data.entry_id;
        }
        if (data.id) {
            return data.id;
        }
        if (data.entry && data.entry.id) {
            return data.entry.id;
        }
        if (data.entry && data.entry.entry_id) {
            return data.entry.entry_id;
        }
        
        // Chercher dans les donn√©es format√©es
        if (data.formatted_data) {
            for (var i = 0; i < data.formatted_data.length; i++) {
                var item = data.formatted_data[i];
                if (item.label && item.label.toLowerCase().indexOf('id') !== -1) {
                    return item.value;
                }
            }
        }
        
        // Si rien n'est trouv√©, essayer d'extraire depuis l'URL ou d'autres sources
        var currentUrl = window.location.href;
        var idMatch = currentUrl.match(/[?&]id=(\d+)/);
        if (idMatch) {
            return idMatch[1];
        }
        
        // Par d√©faut, retourner un ID g√©n√©r√©
        return 'GF-' + Date.now();
    }
    
    /**
     * Afficher le modal avec les d√©tails du lead (version qui fonctionne)
     */
    function showLeadDetailsModal(data) {
        // Debug: Afficher la structure des donn√©es pour trouver l'ID
        console.log('üîç Structure des donn√©es:', data);
        console.log('üîç data.entry_id:', data.entry_id);
        console.log('üîç data.id:', data.id);
        console.log('üîç data.entry:', data.entry);
        
        // Extraire l'ID du lead
        var leadId = extractLeadId(data);
        console.log('üîç ID extrait:', leadId);
        
        // Supprimer l'ancien modal s'il existe
        $('#lead-details-modal').remove();
        
        // HTML avec le design existant restaur√©
        var modalHtml = '<div class="lead-details-modal" id="lead-details-modal">' +
            '<div class="lead-details-modal-content">' +
            '<div class="lead-details-modal-header">' +
            '<div class="lead-details-header-left">' +
            '<div class="lead-details-icon">' +
            '<i class="fas fa-users"></i>' +
            '</div>' +
            '<div class="lead-details-title-section">' +
            '<h2>Lead #' + leadId + '</h2>' +
            '<p class="lead-details-subtitle">Informations compl√®tes et actions</p>' +
            '<p class="lead-details-date">Cr√©√© le ' + formatDate(data.date_created) + '</p>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-header-right">' +
            '<span class="lead-details-modal-close">&times;</span>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-main-content">' +
            '<div class="lead-details-left-column">' +
            '<div id="property-data"></div>' +
            '</div>' +
            '<div class="lead-details-right-column">' +
            '<div id="client-data"></div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';
        
        // HTML avec le design existant (comment√© pour test)
        /*
        var modalHtml = '<div class="lead-details-modal" id="lead-details-modal">' +
            '<div class="lead-details-modal-content">' +
            '<div class="lead-details-modal-header">' +
            '<div class="lead-details-header-left">' +
            '<div class="lead-details-icon">' +
            '<i class="fas fa-users"></i>' +
            '</div>' +
            '<div class="lead-details-title-section">' +
            '<h2>Lead #' + data.entry_id + '</h2>' +
            '<p class="lead-details-subtitle">Informations compl√®tes et actions</p>' +
            '<p class="lead-details-date">Cr√©√© le ' + formatDate(data.date_created) + '</p>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-header-right">' +
            '<span class="lead-details-modal-close">&times;</span>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-main-content">' +
            '<div class="lead-details-left-column">' +
            '<div class="lead-details-info-section">' +
            '<div class="lead-details-section-header">' +
            '<i class="fas fa-home"></i>' +
            '<h3>Informations sur le bien</h3>' +
            '</div>' +
            '<div class="lead-details-info-grid" id="property-data"></div>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-right-column">' +
            '<div class="lead-details-info-section">' +
            '<div class="lead-details-section-header">' +
            '<i class="fas fa-info-circle"></i>' +
            '<h3>Informations sur le lead</h3>' +
            '</div>' +
            '<div class="lead-details-info-grid" id="client-data"></div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';
        */
        
        // Ajouter au DOM
        $('body').append(modalHtml);
        
        // Afficher le modal
        $('#lead-details-modal').fadeIn(200);
        
        // Remplir les donn√©es avec un d√©lai pour s'assurer que le DOM est pr√™t
        setTimeout(function() {
            fillDataBasic(data);
        }, 100);
        
        // Gestion de la fermeture
        $('.lead-details-modal-close').click(function() {
            $('#lead-details-modal').fadeOut(200, function() {
                $(this).remove();
            });
        });
        
        // Fermer en cliquant sur le fond
        $('#lead-details-modal').click(function(e) {
            if (e.target === this) {
                $('#lead-details-modal').fadeOut(200, function() {
                    $(this).remove();
                });
            }
        });
    }
    
    /**
     * Remplir les donn√©es organis√©es par cat√©gories
     */
    function fillDataBasic(data) {
        console.log('üîç fillDataBasic appel√©e avec:', data);
        
        var propertyHtml = '';
        var clientHtml = '';
        
        if (data.formatted_data && data.formatted_data.length > 0) {
            console.log('‚úÖ Donn√©es r√©elles trouv√©es:', data.formatted_data.length, '√©l√©ments');
            
            // Organiser les donn√©es par cat√©gories
            var categories = organizeDataByCategories(data.formatted_data);
            
            // Colonne gauche - Informations sur le bien (2 sections)
            propertyHtml = buildPropertySections(categories, data);
            
            // Colonne droite - Informations sur le lead
            clientHtml = buildClientSection(categories);
            
        } else {
            console.log('‚ùå Aucune donn√©e r√©elle, utilisation des donn√©es de test');
            
            // Donn√©es de test organis√©es
            propertyHtml = buildTestPropertySections();
            clientHtml = buildTestClientSection();
        }
        
        // Mettre √† jour le DOM
        console.log('üîç HTML bien g√©n√©r√©:', propertyHtml.length, 'caract√®res');
        console.log('üîç HTML client g√©n√©r√©:', clientHtml.length, 'caract√®res');
        
        // V√©rifier que les s√©lecteurs existent
        console.log('üîç S√©lecteur #property-data trouv√©:', $('#property-data').length);
        console.log('üîç S√©lecteur #client-data trouv√©:', $('#client-data').length);
        
        // Forcer l'affichage
        $('#property-data').html(propertyHtml);
        $('#client-data').html(clientHtml);
        
        // V√©rifier que le contenu a √©t√© ajout√©
        console.log('üîç Contenu property-data apr√®s injection:', $('#property-data').html().length, 'caract√®res');
        console.log('üîç Contenu client-data apr√®s injection:', $('#client-data').html().length, 'caract√®res');
        
        console.log('‚úÖ DOM mis √† jour avec donn√©es organis√©es');
    }
    
    /**
     * Organiser les donn√©es par cat√©gories selon les IDs de champs
     */
    function organizeDataByCategories(formattedData) {
        var categories = {
            general: [],      // Informations g√©n√©rales sur le bien
            technical: [],    // D√©tails techniques et √©tat du bien
            lead: []         // Informations sur le lead
        };
        
        // IDs des champs par cat√©gorie
        var generalFieldIds = [6, 50, 4, 10, 62, 24, 29, 30, 52, 57, 63, 9, 18, 61, 12, 13, 20, 40, 59, 38, 39];
        var technicalFieldIds = [11, 58, 23, 32, 25, 31, 26, 33, 53, 55];
        
        console.log('üîç D√©but de l\'organisation des donn√©es:', formattedData.length, '√©l√©ments');
        
        for (var i = 0; i < formattedData.length; i++) {
            var item = formattedData[i];
            if (!item.value || !item.value.trim()) {
                console.log('üîç Champ vide ignor√©:', item.label);
                continue;
            }
            
            // Filtrer le champ "Site Web" avec l'URL sp√©cifique
            if (isSiteWebField(item)) {
                console.log('üîç Champ "Site Web" filtr√©:', item.label, '=', item.value);
                continue; // Ignorer ce champ
            }
            
            // Filtrer les champs ind√©sirables
            if (isUnwantedField(item)) {
                console.log('üîç Champ ind√©sirable filtr√©:', item.label, '=', item.value);
                continue; // Ignorer ce champ
            }
            
            var fieldId = item.field_id || item.id;
            var label = item.label.toLowerCase();
            
            console.log('üîç Traitement du champ:', item.label, 'ID:', fieldId);
            
            // Classification par ID de champ
            if (generalFieldIds.indexOf(parseInt(fieldId)) !== -1) {
                categories.general.push(item);
                console.log('‚úÖ Ajout√© aux informations g√©n√©rales:', item.label);
            } else if (technicalFieldIds.indexOf(parseInt(fieldId)) !== -1) {
                categories.technical.push(item);
                console.log('‚úÖ Ajout√© aux d√©tails techniques:', item.label);
            } else {
                // Classification par mots-cl√©s pour les champs sans ID ou non reconnus
                if (isGeneralPropertyField(label, fieldId)) {
                    categories.general.push(item);
                    console.log('‚úÖ Ajout√© aux informations g√©n√©rales (par mots-cl√©s):', item.label);
                } else if (isTechnicalPropertyField(label, fieldId)) {
                    categories.technical.push(item);
                    console.log('‚úÖ Ajout√© aux d√©tails techniques (par mots-cl√©s):', item.label);
                } else {
                    categories.lead.push(item);
                    console.log('‚úÖ Ajout√© aux informations lead:', item.label);
                }
            }
        }
        
        console.log('üîç R√©sultat de la classification:');
        console.log('- Informations g√©n√©rales:', categories.general.length);
        console.log('- D√©tails techniques:', categories.technical.length);
        console.log('- Informations lead:', categories.lead.length);
        
        return categories;
    }
    
    /**
     * V√©rifier si un champ est le champ "Site Web" √† filtrer
     */
    function isSiteWebField(item) {
        var label = item.label.toLowerCase();
        var value = item.value.toLowerCase();
        
        // V√©rifier si c'est un champ "Site Web" ou similaire
        var siteWebKeywords = ['site web', 'site', 'website', 'url', 'lien', 'link'];
        var isSiteWebLabel = false;
        
        for (var i = 0; i < siteWebKeywords.length; i++) {
            if (label.indexOf(siteWebKeywords[i]) !== -1) {
                isSiteWebLabel = true;
                break;
            }
        }
        
        // V√©rifier si la valeur contient l'URL sp√©cifique (plus flexible)
        var isSpecificUrl = value.indexOf('immo-data.fr') !== -1 || 
                           value.indexOf('rapport') !== -1 || 
                           value.indexOf('5c46d089-a7c4-478d-9927-2ef5c29630f2') !== -1;
        
        // Debug pour voir ce qui est filtr√©
        if (isSiteWebLabel) {
            console.log('üîç Champ Site Web d√©tect√©:', item.label, '=', item.value);
            console.log('üîç isSpecificUrl:', isSpecificUrl);
        }
        
        return isSiteWebLabel && isSpecificUrl;
    }
    
    /**
     * V√©rifier si un champ est ind√©sirable et doit √™tre filtr√©
     */
    function isUnwantedField(item) {
        var label = item.label.toLowerCase();
        var value = item.value.toLowerCase();
        
        // Champs √† filtrer par label
        var unwantedLabels = [
            'sans titre',
            'en cochant la case, vous acceptez nos conditions g√©n√©rales d\'utilisation',
            'conditions g√©n√©rales',
            'acceptez nos conditions',
            'checkbox',
            'case √† cocher'
        ];
        
        // V√©rifier par label
        for (var i = 0; i < unwantedLabels.length; i++) {
            if (label.indexOf(unwantedLabels[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rifier par valeur (pour les champs avec des valeurs sp√©cifiques)
        var unwantedValues = [
            'en cochant la case, vous acceptez nos conditions g√©n√©rales d\'utilisation',
            'conditions g√©n√©rales d\'utilisation',
            'j\'accepte les conditions'
        ];
        
        for (var j = 0; j < unwantedValues.length; j++) {
            if (value.indexOf(unwantedValues[j]) !== -1) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Extraire l'URL d'analyse depuis les donn√©es du formulaire
     */
    function getAnalysisUrlFromData(data) {
        if (!data.formatted_data || data.formatted_data.length === 0) {
            return null;
        }
        
        for (var i = 0; i < data.formatted_data.length; i++) {
            var item = data.formatted_data[i];
            if (!item.value || !item.value.trim()) continue;
            
            var label = item.label.toLowerCase();
            var value = item.value;
            
            // Chercher un champ "Site Web" ou similaire
            var siteWebKeywords = ['site web', 'site', 'website', 'url', 'lien', 'link', 'rapport', 'analyse'];
            var isSiteWebField = false;
            
            for (var j = 0; j < siteWebKeywords.length; j++) {
                if (label.indexOf(siteWebKeywords[j]) !== -1) {
                    isSiteWebField = true;
                    break;
                }
            }
            
            // Si c'est un champ de type site web et qu'il contient une URL valide
            if (isSiteWebField && isValidUrl(value)) {
                console.log('üîç URL d\'analyse trouv√©e:', value);
                return value;
            }
        }
        
        console.log('‚ùå Aucune URL d\'analyse trouv√©e');
        return null;
    }
    
    /**
     * V√©rifier si une cha√Æne est une URL valide
     */
    function isValidUrl(string) {
        try {
            // V√©rifier si c'est une URL valide
            var url = new URL(string);
            return url.protocol === 'http:' || url.protocol === 'https:';
        } catch (_) {
            // Si ce n'est pas une URL valide, v√©rifier si √ßa ressemble √† une URL
            return string.indexOf('http') === 0 || string.indexOf('www.') === 0 || string.indexOf('.fr') !== -1 || string.indexOf('.com') !== -1;
        }
    }
    
    /**
     * Construire les sections pour les informations sur le bien
     */
    function buildPropertySections(categories, data) {
        var html = '';
        
        // Section 1: Informations g√©n√©rales sur le bien
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-home"></i>';
        html += '<h3>Informations g√©n√©rales sur le bien</h3>';
        html += '</div>';
        
        if (categories.general.length > 0) {
            for (var i = 0; i < categories.general.length; i++) {
                var item = categories.general[i];
                html += buildFieldItem(item, '#007cba');
            }
        } else {
            html += '<div class="no-data-message">Aucune information g√©n√©rale disponible</div>';
        }
        html += '</div>';
        
        // Section 2: D√©tails techniques et √©tat du bien
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-cogs"></i>';
        html += '<h3>D√©tails techniques et √©tat du bien</h3>';
        html += '</div>';
        
        if (categories.technical.length > 0) {
            for (var j = 0; j < categories.technical.length; j++) {
                var item2 = categories.technical[j];
                html += buildFieldItem(item2, '#28a745');
            }
        }
        
        // ‚úÖ NOUVEAU : Section "Analyser le bien" avec le style demand√©
        var analysisUrl = getAnalysisUrlFromData(data);
        if (analysisUrl) {
            html += '<div class="my-istymo-section my-istymo-analyze-section">';
            html += '<h5 class="my-istymo-section-title"><i class="fas fa-chart-line"></i> Analyser le bien</h5>';
            html += '<div class="my-istymo-analyze-actions">';
            html += '<button type="button" class="my-istymo-btn-analyze" onclick="openPropertyReport(\'' + escapeHtml(analysisUrl) + '\')">';
            html += '<i class="fas fa-external-link-alt"></i> Ouvrir le rapport';
            html += '</button>';
            html += '</div>';
            html += '</div>';
        } else {
            // Afficher "Aucune donn√©e disponible" si pas d'URL d'analyse
            if (categories.technical.length === 0) {
                html += '<div class="no-data-message">Aucune donn√©e disponible</div>';
            }
        }
        
        html += '</div>';
        
        return html;
    }
    
    /**
     * Construire la section pour les informations sur le lead
     */
    function buildClientSection(categories) {
        var html = '';
        
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-user"></i>';
        html += '<h3>Informations sur le lead</h3>';
        html += '</div>';
        
        if (categories.lead.length > 0) {
            for (var i = 0; i < categories.lead.length; i++) {
                var item = categories.lead[i];
                html += buildFieldItem(item, '#dc3545');
            }
        } else {
            html += '<div class="no-data-message">Aucune information sur le lead disponible</div>';
        }
        html += '</div>';
        
        return html;
    }
    
    /**
     * Construire un √©l√©ment de champ
     */
    function buildFieldItem(item, borderColor) {
        var html = '<div class="lead-details-info-item">';
        var displayLabel = item.label;
        
        // Remplacer "Lead Label" par "Type de lead"
        if (displayLabel.toLowerCase() === 'lead label') {
            displayLabel = 'Type de lead';
        }
        
        html += '<div class="lead-details-info-label">' + escapeHtml(displayLabel) + '</div>';
        html += '<div class="lead-details-info-value">' + escapeHtml(item.value) + '</div>';
        html += '</div>';
        return html;
    }
    
    /**
     * Construire les sections de test pour le bien
     */
    function buildTestPropertySections() {
        var html = '';
        
        // Section 1: Informations g√©n√©rales
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-home"></i>';
        html += '<h3>Informations g√©n√©rales sur le bien</h3>';
        html += '</div>';
        html += buildFieldItem({label: 'Type de bien', value: 'Maison'}, '#007cba');
        html += buildFieldItem({label: 'Adresse', value: '123 Rue de la Paix, Paris'}, '#007cba');
        html += buildFieldItem({label: 'Surface', value: '120 m¬≤'}, '#007cba');
        html += '</div>';
        
        // Section 2: D√©tails techniques
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-cogs"></i>';
        html += '<h3>D√©tails techniques et √©tat du bien</h3>';
        html += '</div>';
        html += buildFieldItem({label: 'Ann√©e de construction', value: '1995'}, '#28a745');
        html += buildFieldItem({label: 'Bien r√©nov√©', value: 'Oui'}, '#28a745');
        
        // Pour les donn√©es de test, afficher "Aucune donn√©e disponible" car pas d'URL d'analyse
        html += '<div class="no-data-message">Aucune donn√©e disponible</div>';
        
        html += '</div>';
        
        return html;
    }
    
    /**
     * Construire la section de test pour le lead
     */
    function buildTestClientSection() {
        var html = '';
        
        html += '<div class="lead-details-info-section">';
        html += '<div class="lead-details-section-header">';
        html += '<i class="fas fa-user"></i>';
        html += '<h3>Informations sur le lead</h3>';
        html += '</div>';
        html += buildFieldItem({label: 'Nom', value: 'Jean Dupont'}, '#dc3545');
        html += buildFieldItem({label: 'T√©l√©phone', value: '06 12 34 56 78'}, '#dc3545');
        html += buildFieldItem({label: 'Email', value: 'jean.dupont@email.com'}, '#dc3545');
        html += '</div>';
        
        return html;
    }
    
    /**
     * D√©terminer si un champ appartient aux informations g√©n√©rales sur le bien
     */
    function isGeneralPropertyField(label, fieldId) {
        // IDs des champs pour les informations g√©n√©rales
        var generalFieldIds = [6, 50, 4, 10, 62, 24, 29, 30, 52, 57, 63, 9, 18, 61, 12, 13, 20, 40, 59, 38, 39];
        
        // V√©rifier par ID si disponible
        if (fieldId && generalFieldIds.indexOf(parseInt(fieldId)) !== -1) {
            return true;
        }
        
        // V√©rifier par mots-cl√©s dans le label
        var labelLower = label.toLowerCase();
        var generalKeywords = [
            'type de bien', 'emplacement', 'adresse', 'surface', 'terrain', 'viabilisation',
            'maison', 'appartement', 'commerce', 'caract√©ristiques', 'pi√®ces', 'v√©hicules', 'parking'
        ];
        
        for (var i = 0; i < generalKeywords.length; i++) {
            if (labelLower.indexOf(generalKeywords[i]) !== -1) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * D√©terminer si un champ appartient aux d√©tails techniques
     */
    function isTechnicalPropertyField(label, fieldId) {
        // IDs des champs pour les d√©tails techniques
        var technicalFieldIds = [11, 58, 23, 32, 25, 31, 26, 33, 53, 55];
        
        // V√©rifier par ID si disponible
        if (fieldId && technicalFieldIds.indexOf(parseInt(fieldId)) !== -1) {
            return true;
        }
        
        // V√©rifier par mots-cl√©s dans le label
        var labelLower = label.toLowerCase();
        var technicalKeywords = [
            '√©tage', 'construction', 'r√©nov√©', 'r√©novation', '√©quipements', 'commentaires', 'pr√©cisions'
        ];
        
        for (var i = 0; i < technicalKeywords.length; i++) {
            if (labelLower.indexOf(technicalKeywords[i]) !== -1) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Remplir les donn√©es de mani√®re ultra-simple (sans tri complexe)
     */
    function fillDataSimple(data) {
        var formattedData = data.formatted_data;
        var propertyHtml = '';
        var clientHtml = '';
        var item, label, value;
        
        // Remplissage ultra-rapide sans tri complexe
        for (var i = 0, len = formattedData.length; i < len; i++) {
            item = formattedData[i];
            if (!item.value || !item.value.trim()) continue;
            
            label = item.label;
            value = item.value;
            
            // Tri simple bas√© sur quelques mots-cl√©s seulement
            if (isSimplePropertyField(label)) {
                propertyHtml += '<div class="lead-details-info-item">' +
                    '<div class="lead-details-info-label">' + escapeHtml(label) + '</div>' +
                    '<div class="lead-details-info-value">' + escapeHtml(value) + '</div>' +
                    '</div>';
            } else {
                clientHtml += '<div class="lead-details-info-item">' +
                    '<div class="lead-details-info-label">' + escapeHtml(label) + '</div>' +
                    '<div class="lead-details-info-value">' + escapeHtml(value) + '</div>' +
                    '</div>';
            }
        }
        
        // Mise √† jour DOM directe
        $('#property-panel').html(propertyHtml);
        $('#client-panel').html(clientHtml);
    }
    
    /**
     * D√©tection ultra-simple des champs propri√©t√© (seulement les plus √©vidents)
     */
    function isSimplePropertyField(label) {
        var lowerLabel = label.toLowerCase();
        return lowerLabel.indexOf('adresse') !== -1 ||
               lowerLabel.indexOf('surface') !== -1 ||
               lowerLabel.indexOf('type') !== -1 ||
               lowerLabel.indexOf('prix') !== -1 ||
               lowerLabel.indexOf('chambre') !== -1;
    }
    
    /**
     * Construire le HTML du modal de mani√®re ultra-simple
     */
    function buildSimpleModalHTML(data) {
        return '<div class="lead-details-modal" id="lead-details-modal" style="display:none;">' +
            '<div class="lead-details-modal-content">' +
            '<div class="lead-details-modal-header">' +
            '<div class="lead-details-header-left">' +
            '<div class="lead-details-icon"><i class="fas fa-users"></i></div>' +
            '<div class="lead-details-title-section">' +
            '<h2>Lead #' + data.entry_id + '</h2>' +
            '<p class="lead-details-subtitle">Informations compl√®tes et actions</p>' +
            '<p class="lead-details-date">Cr√©√© le ' + formatDate(data.date_created) + '</p>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-header-right">' +
            '<span class="lead-details-modal-close">&times;</span>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-main-content">' +
            '<div class="lead-details-left-column">' +
            '<div class="lead-details-info-section">' +
            '<div class="lead-details-section-header">' +
            '<i class="fas fa-home"></i>' +
            '<h3>Informations sur le bien</h3>' +
            '</div>' +
            '<div class="lead-details-info-grid" id="property-panel"></div>' +
            '</div>' +
            '</div>' +
            '<div class="lead-details-right-column">' +
            '<div class="lead-details-info-section">' +
            '<div class="lead-details-section-header">' +
            '<i class="fas fa-info-circle"></i>' +
            '<h3>Informations sur le lead</h3>' +
            '</div>' +
            '<div class="lead-details-info-grid" id="client-panel"></div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>' +
            '</div>';
    }
    
    /**
     * Afficher l'indicateur de chargement
     */
    function showLoadingIndicator() {
        // Pas besoin d'indicateur s√©par√©, le modal s'affiche directement
    }
    
    /**
     * Masquer l'indicateur de chargement
     */
    function hideLoadingIndicator() {
        // Pas n√©cessaire car le modal s'affiche directement
    }
    
    /**
     * Initialiser les panels avec les donn√©es tri√©es (ultra-optimis√©)
     */
    function initializePanels(data) {
        // Cache des donn√©es pour √©viter les recalculs
        var formattedData = data.formatted_data;
        var propertyData = [];
        var clientData = [];
        var item, label, value, trimmedValue;
        
        // Ultra-optimisation : une seule boucle avec cache des variables
        for (var i = 0, len = formattedData.length; i < len; i++) {
            item = formattedData[i];
            value = item.value;
            
            // V√©rification rapide de la valeur
            if (!value) continue;
            trimmedValue = value.trim();
            if (!trimmedValue) continue;
            
            label = item.label.toLowerCase();
            
            // D√©tection ultra-rapide avec cache
            if (isPropertyFieldFast(label, trimmedValue)) {
                propertyData.push(item);
            } else if (isClientFieldFast(label, trimmedValue)) {
                clientData.push(item);
            }
        }
        
        // Remplissage ultra-rapide avec batch DOM
        fillPanelsBatch(propertyData, clientData);
    }
    
    /**
     * Remplir les deux panels en une seule op√©ration DOM (ultra-rapide)
     */
    function fillPanelsBatch(propertyData, clientData) {
        // Construction simultan√©e des deux panels
        var propertyContent = buildPanelContent(propertyData, 'home', 'Aucune information sur le bien disponible');
        var clientContent = buildPanelContent(clientData, 'user', 'Aucune information sur le client disponible');
        
        // Mise √† jour DOM en une seule op√©ration
        $('#property-panel').html(propertyContent);
        $('#client-panel').html(clientContent);
    }
    
    /**
     * Construire le contenu d'un panel de mani√®re ultra-optimis√©e
     */
    function buildPanelContent(data, iconClass, noDataMessage) {
        if (data.length === 0) {
            return [
                '<div class="panel-data-grid">',
                '<div class="panel-no-data">',
                '<i class="fas fa-' + iconClass + '"></i>',
                '<p>' + noDataMessage + '</p>',
                '</div>',
                '</div>'
            ].join('');
        }
        
        var content = ['<div class="panel-data-grid">'];
        var item, icon, label, value, formattedPhone;
        
        for (var i = 0, len = data.length; i < len; i++) {
            item = data[i];
            icon = getFieldIconFast(item.label);
            label = escapeHtml(item.label);
            value = item.value;
            
            content.push('<div class="panel-data-item">');
            content.push('<div class="panel-data-label">');
            content.push('<i class="fas fa-' + icon + '"></i>');
            content.push('<span>' + label + '</span>');
            content.push('</div>');
            
            if (isPhoneFieldFast(item.label, value)) {
                formattedPhone = formatPhoneForDialingFast(value);
                content.push('<div class="panel-data-value">');
                content.push('<a href="tel:' + escapeHtml(formattedPhone) + '" class="phone-link-modal" title="Appeler directement">');
                content.push('<i class="fas fa-phone"></i>');
                content.push(escapeHtml(value));
                content.push('</a>');
                content.push('</div>');
            } else if (isAddressFieldFast(item.label, value)) {
                content.push('<div class="panel-data-value">');
                content.push(formatAddressWithCityFast(value, ''));
                content.push('</div>');
            } else {
                content.push('<div class="panel-data-value">' + escapeHtml(value) + '</div>');
            }
            
            content.push('</div>');
        }
        
        content.push('</div>');
        return content.join('');
    }
    
    /**
     * Remplir le panel des informations sur le bien (optimis√©)
     */
    function fillPropertyPanelOptimized(propertyData) {
        var $panel = $('#property-panel');
        var content = [];
        var item, icon, label, value, formattedPhone;
        
        content.push('<div class="panel-data-grid">');
        
        if (propertyData.length === 0) {
            content.push(
                '<div class="panel-no-data">',
                '<i class="fas fa-home"></i>',
                '<p>Aucune information sur le bien disponible</p>',
                '</div>'
            );
        } else {
            // Optimisation : construction du HTML en une seule fois
            for (var i = 0, len = propertyData.length; i < len; i++) {
                item = propertyData[i];
                icon = getFieldIcon(item.label);
                label = escapeHtml(item.label);
                value = item.value;
                
                content.push('<div class="panel-data-item">');
                content.push('<div class="panel-data-label">');
                content.push('<i class="fas fa-' + icon + '"></i>');
                content.push('<span>' + label + '</span>');
                content.push('</div>');
                
                if (isPhoneField(item.label, value)) {
                    formattedPhone = formatPhoneForDialing(value);
                    content.push('<div class="panel-data-value">');
                    content.push('<a href="tel:' + escapeHtml(formattedPhone) + '" class="phone-link-modal" title="Appeler directement">');
                    content.push('<i class="fas fa-phone"></i>');
                    content.push(escapeHtml(value));
                    content.push('</a>');
                    content.push('</div>');
                } else if (isAddressField(item.label, value)) {
                    content.push('<div class="panel-data-value">');
                    content.push(formatAddressWithCity(value, ''));
                    content.push('</div>');
                } else {
                    content.push('<div class="panel-data-value">' + escapeHtml(value) + '</div>');
                }
                
                content.push('</div>');
            }
        }
        
        content.push('</div>');
        
        // Une seule op√©ration DOM
        $panel.html(content.join(''));
    }
    
    /**
     * Remplir le panel des informations sur le client (optimis√©)
     */
    function fillClientPanelOptimized(clientData) {
        var $panel = $('#client-panel');
        var content = [];
        var item, icon, label, value, formattedPhone;
        
        content.push('<div class="panel-data-grid">');
        
        if (clientData.length === 0) {
            content.push(
                '<div class="panel-no-data">',
                '<i class="fas fa-user"></i>',
                '<p>Aucune information sur le client disponible</p>',
                '</div>'
            );
        } else {
            // Optimisation : construction du HTML en une seule fois
            for (var i = 0, len = clientData.length; i < len; i++) {
                item = clientData[i];
                icon = getFieldIcon(item.label);
                label = escapeHtml(item.label);
                value = item.value;
                
                content.push('<div class="panel-data-item">');
                content.push('<div class="panel-data-label">');
                content.push('<i class="fas fa-' + icon + '"></i>');
                content.push('<span>' + label + '</span>');
                content.push('</div>');
                
                if (isPhoneField(item.label, value)) {
                    formattedPhone = formatPhoneForDialing(value);
                    content.push('<div class="panel-data-value">');
                    content.push('<a href="tel:' + escapeHtml(formattedPhone) + '" class="phone-link-modal" title="Appeler directement">');
                    content.push('<i class="fas fa-phone"></i>');
                    content.push(escapeHtml(value));
                    content.push('</a>');
                    content.push('</div>');
                } else {
                    content.push('<div class="panel-data-value">' + escapeHtml(value) + '</div>');
                }
                
                content.push('</div>');
            }
        }
        
        content.push('</div>');
        
        // Une seule op√©ration DOM
        $panel.html(content.join(''));
    }
    
    // Cache global pour les mots-cl√©s (√©vite la recr√©ation √† chaque appel)
    var propertyKeywordsCache = [
        'adresse', 'address', 'rue', 'street', 'voie', 'avenue', 'boulevard', 'place', 'lieu',
        'surface', 'm¬≤', 'm2', 'superficie', 'taille', 'dimension',
        'type', 'b√¢timent', 'building', 'maison', 'appartement', 'studio', 'loft',
        'chambre', 'chambres', 'pi√®ce', 'pi√®ces', 'salle de bain', 'salle de bains',
        '√©tage', 'etage', 'niveau', 'ascenseur', 'balcon', 'terrasse', 'jardin',
        'parking', 'garage', 'cave', 'grenier', 'sous-sol',
        'prix', 'valeur', 'estimation', 'budget',
        '√©nergie', 'energie', 'classe', 'dpe', 'diagnostic',
        'exposition', 'orientation', 'vue', 'calme',
        'proximit√©', 'proximite', 'transport', 'm√©tro', 'metro', 'bus', 'gare',
        '√©cole', 'ecole', 'commerce', 'pharmacie', 'm√©decin', 'medecin'
    ];
    
    /**
     * D√©terminer si un champ appartient aux informations sur le bien (ultra-rapide)
     */
    function isPropertyFieldFast(label, value) {
        // V√©rification ultra-rapide avec cache
        for (var i = 0, len = propertyKeywordsCache.length; i < len; i++) {
            if (label.indexOf(propertyKeywordsCache[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rification rapide d'adresse (√©vite l'appel de fonction)
        return /\d/.test(value) && /[a-zA-Z√Ä-√ø]/.test(value) && value.length > 5;
    }
    
    // Cache global pour les mots-cl√©s client (√©vite la recr√©ation √† chaque appel)
    var clientKeywordsCache = [
        'nom', 'pr√©nom', 'prenom', 'nom de famille', 'nom de famille',
        't√©l√©phone', 'telephone', 'phone', 'tel', 'mobile', 'portable', 'fixe',
        'email', 'mail', 'courriel', 'adresse email', 'adresse mail',
        'soci√©t√©', 'societe', 'entreprise', 'company', 'firm',
        'fonction', 'poste', 'profession', 'm√©tier', 'metier',
        '√¢ge', 'age', 'date de naissance', 'naissance',
        'situation', 'familiale', 'mari√©', 'marie', 'c√©libataire', 'celibataire',
        'enfant', 'enfants', 'foyer',
        'revenu', 'salaire', 'budget', 'financement',
        'urgence', 'urgent', 'disponibilit√©', 'disponibilite',
        'pr√©f√©rence', 'preference', 'souhait', 'besoin', 'crit√®re', 'critere',
        'commentaire', 'message', 'note', 'remarque'
    ];
    
    /**
     * D√©terminer si un champ appartient aux informations sur le client (ultra-rapide)
     */
    function isClientFieldFast(label, value) {
        // V√©rification ultra-rapide avec cache
        for (var i = 0, len = clientKeywordsCache.length; i < len; i++) {
            if (label.indexOf(clientKeywordsCache[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rification rapide de t√©l√©phone (√©vite l'appel de fonction)
        var cleanValue = value.replace(/[^0-9+]/g, '');
        return /^(0[1-9]|\+33[1-9]|33[1-9])[0-9]{8}$/.test(cleanValue);
    }
    
    // Cache des ic√¥nes pour √©viter les recalculs
    var iconCache = {};
    
    /**
     * Fonction pour obtenir l'ic√¥ne appropri√©e selon le type de champ (ultra-rapide)
     */
    function getFieldIconFast(fieldLabel) {
        // V√©rifier le cache d'abord
        if (iconCache[fieldLabel]) {
            return iconCache[fieldLabel];
        }
        
        var label = fieldLabel.toLowerCase();
        var icon = 'info-circle'; // valeur par d√©faut
        
        // V√©rifications ultra-rapides avec cache
        if (label.indexOf('adresse') !== -1 || label.indexOf('address') !== -1) {
            icon = 'map-marker-alt';
        } else if (label.indexOf('t√©l√©phone') !== -1 || label.indexOf('phone') !== -1) {
            icon = 'phone';
        } else if (label.indexOf('email') !== -1 || label.indexOf('mail') !== -1) {
            icon = 'envelope';
        } else if (label.indexOf('surface') !== -1 || label.indexOf('m¬≤') !== -1) {
            icon = 'ruler';
        } else if (label.indexOf('type') !== -1 || label.indexOf('b√¢timent') !== -1) {
            icon = 'building';
        } else if (label.indexOf('date') !== -1) {
            icon = 'calendar';
        } else if (label.indexOf('analyse') !== -1 || label.indexOf('lien') !== -1) {
            icon = 'link';
        }
        
        // Mettre en cache
        iconCache[fieldLabel] = icon;
        return icon;
    }
    
    /**
     * V√©rification ultra-rapide des champs t√©l√©phone
     */
    function isPhoneFieldFast(fieldLabel, value) {
        var label = fieldLabel.toLowerCase();
        var phoneKeywords = ['t√©l√©phone', 'telephone', 'phone', 'tel', 'mobile', 'portable', 'fixe'];
        
        for (var i = 0, len = phoneKeywords.length; i < len; i++) {
            if (label.indexOf(phoneKeywords[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rification regex rapide
        var cleanValue = value.replace(/[^0-9+]/g, '');
        return /^(0[1-9]|\+33[1-9]|33[1-9])[0-9]{8}$/.test(cleanValue);
    }
    
    /**
     * V√©rification ultra-rapide des champs adresse
     */
    function isAddressFieldFast(fieldLabel, value) {
        var label = fieldLabel.toLowerCase();
        var addressKeywords = ['adresse', 'address', 'rue', 'street', 'voie', 'avenue', 'boulevard', 'place', 'lieu'];
        
        for (var i = 0, len = addressKeywords.length; i < len; i++) {
            if (label.indexOf(addressKeywords[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rification rapide d'adresse
        return /\d/.test(value) && /[a-zA-Z√Ä-√ø]/.test(value) && value.length > 5;
    }
    
    /**
     * Formatage ultra-rapide du t√©l√©phone
     */
    function formatPhoneForDialingFast(phone) {
        var cleanPhone = phone.replace(/[^0-9+]/g, '');
        
        // Si le num√©ro commence par 0, le remplacer par +33
        var match = cleanPhone.match(/^0([1-9][0-9]{8})$/);
        if (match) {
            return '+33' + match[1];
        }
        
        // Si le num√©ro commence d√©j√† par +33, le garder tel quel
        if (/^\+33([1-9][0-9]{8})$/.test(cleanPhone)) {
            return cleanPhone;
        }
        
        // Si le num√©ro commence par 33 (sans +), ajouter le +
        var match33 = cleanPhone.match(/^33([1-9][0-9]{8})$/);
        if (match33) {
            return '+33' + match33[1];
        }
        
        return cleanPhone;
    }
    
    /**
     * Formatage ultra-rapide de l'adresse avec ville
     */
    function formatAddressWithCityFast(addressValue, cityValue) {
        var address = addressValue ? addressValue.trim() : '';
        var city = cityValue ? cityValue.trim() : '';
        
        if (!address && !city) return '';
        if (!address) return city;
        if (!city) return address;
        
        return address + '<br><small style="color: #666;">' + city + '</small>';
    }
    
    /**
     * Fonction pour d√©tecter si un champ est un t√©l√©phone
     */
    function isPhoneField(fieldLabel, value) {
        if (!value || value.trim() === '') return false;
        
        // V√©rifier le label du champ
        var phoneKeywords = ['t√©l√©phone', 'telephone', 'phone', 'tel', 'mobile', 'portable', 'fixe'];
        var labelLower = fieldLabel.toLowerCase();
        
        for (var i = 0; i < phoneKeywords.length; i++) {
            if (labelLower.indexOf(phoneKeywords[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rifier si la valeur ressemble √† un num√©ro de t√©l√©phone fran√ßais
        var cleanValue = value.replace(/[^0-9+]/g, '');
        var phoneRegex = /^(0[1-9]|\+33[1-9]|33[1-9])[0-9]{8}$/;
        return phoneRegex.test(cleanValue);
    }
    
    /**
     * Fonction pour d√©tecter si un champ est une adresse
     */
    function isAddressField(fieldLabel, value) {
        if (!value || value.trim() === '') return false;
        
        // V√©rifier le label du champ - mots-cl√©s √©tendus
        var addressKeywords = [
            'adresse', 'address', 'rue', 'street', 'voie', 'avenue', 'boulevard', 'place', 'lieu',
            'adr', 'addr', 'location', 'localisation', 'adresse compl√®te', 'adresse compl√®te',
            'adresse du bien', 'adresse du logement', 'adresse de la propri√©t√©',
            'num√©ro', 'numero', 'n¬∞', 'n ', 'street number', 'num√©ro de rue',
            'adresse postale', 'adresse de contact', 'adresse principale'
        ];
        var labelLower = fieldLabel.toLowerCase();
        
        for (var i = 0; i < addressKeywords.length; i++) {
            if (labelLower.indexOf(addressKeywords[i]) !== -1) {
                return true;
            }
        }
        
        // V√©rifier aussi si la valeur ressemble √† une adresse (contient des chiffres et des lettres)
        var cleanValue = value.trim();
        if (/\d/.test(cleanValue) && /[a-zA-Z√Ä-√ø]/.test(cleanValue) && cleanValue.length > 5) {
            return true;
        }
        
        return false;
    }
    
    /**
     * Fonction pour d√©tecter si un champ est une ville
     */
    function isCityField(fieldLabel, value) {
        if (!value || value.trim() === '') return false;
        
        // V√©rifier le label du champ
        var cityKeywords = ['ville', 'city', 'commune', 'municipalit√©', 'localit√©'];
        var labelLower = fieldLabel.toLowerCase();
        
        for (var i = 0; i < cityKeywords.length; i++) {
            if (labelLower.indexOf(cityKeywords[i]) !== -1) {
                return true;
            }
        }
        
        return false;
    }
    
    /**
     * Fonction pour formater une adresse avec ville
     */
    function formatAddressWithCity(addressValue, cityValue) {
        var address = addressValue ? addressValue.trim() : '';
        var city = cityValue ? cityValue.trim() : '';
        
        if (!address && !city) {
            return '';
        }
        
        if (!address) {
            return city;
        }
        
        if (!city) {
            return address;
        }
        
        return address + '<br><small style="color: #666;">' + city + '</small>';
    }
    
    /**
     * Fonction pour formater un num√©ro de t√©l√©phone pour l'appel direct
     */
    function formatPhoneForDialing(phone) {
        if (!phone || phone.trim() === '') return '';
        
        // Nettoyer le num√©ro (garder seulement les chiffres et +)
        var cleanPhone = phone.replace(/[^0-9+]/g, '');
        
        // Si le num√©ro commence par 0, le remplacer par +33
        var match = cleanPhone.match(/^0([1-9][0-9]{8})$/);
        if (match) {
            return '+33' + match[1];
        }
        
        // Si le num√©ro commence d√©j√† par +33, le garder tel quel
        if (/^\+33([1-9][0-9]{8})$/.test(cleanPhone)) {
            return cleanPhone;
        }
        
        // Si le num√©ro commence par 33 (sans +), ajouter le +
        var match33 = cleanPhone.match(/^33([1-9][0-9]{8})$/);
        if (match33) {
            return '+33' + match33[1];
        }
        
        // Si le num√©ro commence par +, le garder tel quel
        if (cleanPhone.indexOf('+') === 0) {
            return cleanPhone;
        }
        
        // Par d√©faut, retourner le num√©ro tel quel
        return cleanPhone;
    }
    
    
    /**
     * Fermer le modal
     */
    function closeLeadDetailsModal() {
        $('#lead-details-modal').fadeOut(300, function() {
            $(this).remove();
        });
    }
    
    /**
     * Afficher un message de notification
     */
    function showMessage(message, type) {
        var messageHtml = '<div class="lead-vendeur-message ' + type + '">' + message + '</div>';
        
        // Supprimer les anciens messages
        $('.lead-vendeur-message').remove();
        
        // Ajouter le nouveau message
        $('.my-istymo-container').prepend(messageHtml);
        
        // Afficher le message
        $('.lead-vendeur-message').fadeIn(300);
        
        // Masquer apr√®s 3 secondes
        setTimeout(function() {
            $('.lead-vendeur-message').fadeOut(300, function() {
                $(this).remove();
            });
        }, 3000);
    }
    
    /**
     * √âchapper le HTML pour √©viter les injections
     */
    function escapeHtml(text) {
        var map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        
        return text.replace(/[&<>"']/g, function(m) {
            return map[m];
        });
    }
    
    /**
     * Formater une date
     */
    function formatDate(dateString) {
        var date = new Date(dateString);
        return date.toLocaleDateString('fr-FR', {
            year: 'numeric',
            month: 'long',
            day: 'numeric',
            hour: '2-digit',
            minute: '2-digit'
        });
    }
    
    // Auto-refresh des favoris au chargement de la page
    function refreshFavoris() {
        $('.favorite-btn').each(function() {
            var $toggle = $(this);
            var entryId = $toggle.data('entry-id');
            
            // V√©rifier si c'est un favori (bas√© sur la classe)
            if ($toggle.hasClass('favori-active')) {
                $toggle.closest('.lead-vendeur-row').addClass('favori-row');
            }
        });
    }
    
    // Initialiser au chargement
    refreshFavoris();
    
    // ‚úÖ NOUVEAU : Initialiser la pagination AJAX
    initializePagination();
    
    // Animation pour les nouvelles lignes
    $('.lead-vendeur-row').each(function(index) {
        $(this).css('opacity', '0').delay(index * 50).animate({
            opacity: 1
        }, 300);
    });
    
    // ‚úÖ NOUVEAU : Gestion du bouton de d√©bogage
    $(document).on('click', '#toggle-debug-data', function(e) {
        e.preventDefault();
        
        var $debugSection = $('#debug-data-section');
        var $button = $(this);
        var $icon = $button.find('i');
        
        if ($debugSection.is(':visible')) {
            $debugSection.slideUp(300);
            $icon.removeClass('fa-eye-slash').addClass('fa-eye');
            $button.html('<i class="fas fa-eye"></i> Afficher/Masquer les donn√©es brutes');
        } else {
            $debugSection.slideDown(300);
            $icon.removeClass('fa-eye').addClass('fa-eye-slash');
            $button.html('<i class="fas fa-eye-slash"></i> Afficher/Masquer les donn√©es brutes');
        }
    });
    
    // ‚úÖ NOUVEAU : Gestion de la pagination AJAX
    $(document).on('click', '.pagination-btn, .pagination-number', function(e) {
        e.preventDefault();
        
        var $button = $(this);
        var page = $button.data('page');
        
        if (page && !$button.hasClass('disabled') && !$button.hasClass('current')) {
            loadPage(page);
        }
    });
    
    // ‚úÖ NOUVEAU : Initialiser la pagination
    function initializePagination() {
        if (typeof leadVendeurAjax !== 'undefined') {
            // Charger la premi√®re page automatiquement
            loadPage(1);
        }
    }
    
    // Fonction pour charger une page via AJAX
    function loadPage(page) {
        var $tableBody = $('#lead-vendeur-table-body');
        var $paginationContainer = $('#lead-vendeur-pagination-container');
        var $paginationInfo = $('.pagination-info');
        
        // Afficher l'indicateur de chargement
        $tableBody.html('<tr><td colspan="100%" style="text-align: center; padding: 20px;"><div class="loading-spinner"></div><p>Chargement des donn√©es...</p></td></tr>');
        $paginationContainer.html('<div style="text-align: center; padding: 20px;"><div class="loading-spinner"></div></div>');
        
        // Requ√™te AJAX
        $.ajax({
            url: leadVendeurAjax.ajax_url,
            type: 'POST',
            data: {
                action: 'lead_vendeur_pagination',
                nonce: leadVendeurAjax.nonce,
                page: page,
                per_page: leadVendeurAjax.per_page
            },
            success: function(response) {
                if (response.success) {
                    // Mettre √† jour le tableau
                    $tableBody.html(response.data.table_html);
                    
                    // Mettre √† jour la pagination
                    $paginationContainer.html(response.data.pagination_html);
                    
                    // Mettre √† jour les informations de pagination
                    var info = response.data.pagination_info;
                    if (info.total_pages > 1) {
                        $paginationInfo.html(
                            '<span id="page-info">Page ' + info.current_page + ' sur ' + info.total_pages + '</span>' +
                            '<span style="margin-left: 15px; color: #666;">Affichage des entr√©es ' + info.start_entry + ' √† ' + info.end_entry + ' sur ' + info.total_entries + '</span>'
                        );
                    }
                    
                    // Animation pour les nouvelles lignes
                    $('.lead-vendeur-row').each(function(index) {
                        $(this).css('opacity', '0').delay(index * 50).animate({
                            opacity: 1
                        }, 300);
                    });
                } else {
                    console.error('Erreur lors du chargement de la page:', response.data);
                    $tableBody.html('<tr><td colspan="100%" style="text-align: center; padding: 20px; color: #d63384;">Erreur lors du chargement des donn√©es</td></tr>');
                }
            },
            error: function(xhr, status, error) {
                console.error('Erreur AJAX:', error);
                $tableBody.html('<tr><td colspan="100%" style="text-align: center; padding: 20px; color: #d63384;">Erreur de connexion</td></tr>');
            }
        });
    }
    
    // ‚úÖ NOUVEAU : Fonction pour ouvrir le rapport d'analyse
    function openPropertyReport(websiteUrl) {
        console.log('Ouverture du rapport pour l\'URL:', websiteUrl);
        
        // V√©rifier si l'URL est valide
        if (websiteUrl && websiteUrl.trim() !== '') {
            // Ajouter http:// si l'URL ne commence pas par http:// ou https://
            if (!websiteUrl.startsWith('http://') && !websiteUrl.startsWith('https://')) {
                websiteUrl = 'http://' + websiteUrl;
            }
            
            // Ouvrir l'URL dans un nouvel onglet
            window.open(websiteUrl, '_blank');
        } else {
            alert('URL du site web non disponible pour ce bien.');
        }
    }
    
    // ‚úÖ NOUVEAU : Fonction utilitaire pour √©chapper le HTML
    function escapeHtml(text) {
        var map = {
            '&': '&amp;',
            '<': '&lt;',
            '>': '&gt;',
            '"': '&quot;',
            "'": '&#039;'
        };
        return text.replace(/[&<>"']/g, function(m) { return map[m]; });
    }
    
});
